
#ifndef PCYNLITX
#define PCYNLITX

#include <iostream>
#include <thread>
#include <mutex>
#include <vector>
#include <synchronizer_channel.hpp>
#include <synchronizer.hpp>
#include <channel.hpp>
#include <chrono> 
#include <windows.h>
#include <type_traits>
#include <typeinfo>
#include <thread_creator.hpp>


namespace pcynlitx {

  class artificial
  {
      public:
      artificial(){};

  };

  template <typename T=artificial, typename M=artificial>
  class threads
  {
     public:

      explicit threads(int thr_num): syn(thr_num), th_crt(thr_num){

         this->th_crt.receive_synchronizer(&this->syn);
      };

      explicit threads(int thr_num, channel<M> * ch=nullptr): syn(thr_num), th_crt(thr_num,ch){

         this->syn_ch.Receive_Synchronizer(&this->syn);

         this->syn_ch.Receive_Messenger(ch);

         this->th_crt.receive_synchronizer(&this->syn);

         this->th_crt.receive_synchronizer_mpi(&this->syn_ch);
      };

      explicit threads(T * ptr, int thr_num) : syn(thr_num), th_crt(ptr,thr_num){

         this->th_crt.receive_synchronizer(&this->syn);
      };


      explicit threads(T * ptr, int thr_num, channel<M> * ch=nullptr) : syn(thr_num), th_crt(ptr,thr_num,ch){

         this->syn_ch.Receive_Messenger(ch);

         this->syn_ch.Receive_Synchronizer(&this->syn);

         this->th_crt.receive_synchronizer(&this->syn);

         this->th_crt.receive_synchronizer_mpi(&this->syn_ch);
      };


      virtual ~threads(){}

      T * objPtr;

      template<typename B, typename... args>
      B activate(B (T::* fPtr)  (synchronizer_channel<M> & syn, args... thParams), 
      
        int thread_num, args... thParams){

        this->th_crt.activate(fPtr,thread_num,thParams...);
      }

      template<typename B, typename... args>
      B activate(B (* func_Ptr) (synchronizer_channel<M> & syn, args... thParams),  
      
        int thread_num, args... thParams){

        this->th_crt.activate(func_Ptr,thread_num,thParams...);
      }

      template<typename B, typename... args>
      B activate(B (T::* fPtr)  (synchronizer & syn, args... thParams), 
      
        int thread_num, args... thParams){

        this->th_crt.activate(fPtr,thread_num,thParams...);
      }


      template<typename B, typename... args>
      B activate(B (* func_Ptr) (synchronizer & syn, args... thParams),  
      
        int thread_num, args... thParams){

        this->th_crt.activate(func_Ptr,thread_num,thParams...);
      }


      void join(int thrNum){

           this->th_crt.join(thrNum);
      }

      synchronizer_channel<M> syn_ch;

      synchronizer syn;

      channel<M> * ch;

      thread_creator<T,M> th_crt;

   };
};


#endif  /* PCYNLITX */